// <auto-generated />
using System;
using Library.Tools.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Tools.Migrations
{
    [DbContext(typeof(DbMigrations))]
    [Migration("20190403192037_Library_1554319227")]
    partial class Library_1554319227
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("library")
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("InsertedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Language");

                    b.Property<string>("Tenant");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("InsertedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Tenant");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Library.Entities.Copy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("InsertedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Number");

                    b.Property<string>("Tenant");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("InsertedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Tenant");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Copy");
                });

            modelBuilder.Entity("Library.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookId");

                    b.Property<Guid?>("CopyId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("DueDate");

                    b.Property<DateTime>("InsertedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ReservationId");

                    b.Property<DateTime?>("ReturnDate");

                    b.Property<string>("Tenant");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CopyId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("InsertedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ReservationId");

                    b.HasIndex("Tenant");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("Library.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DocumentId");

                    b.Property<string>("Email");

                    b.Property<DateTime>("InsertedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("Tenant");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("InsertedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Tenant");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Library.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("InsertedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("MemberId");

                    b.Property<string>("Number");

                    b.Property<DateTime>("RequestDate");

                    b.Property<int>("Status");

                    b.Property<string>("Tenant");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("InsertedAt");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("MemberId");

                    b.HasIndex("Tenant");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Library.Entities.Copy", b =>
                {
                    b.HasOne("Library.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Library.Entities.Loan", b =>
                {
                    b.HasOne("Library.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Entities.Copy", "Copy")
                        .WithMany()
                        .HasForeignKey("CopyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Entities.Reservation")
                        .WithMany("Loans")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Library.Entities.Reservation", b =>
                {
                    b.HasOne("Library.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
